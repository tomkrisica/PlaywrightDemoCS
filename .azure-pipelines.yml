trigger:
- main  # alebo master, záleží od názvu vašej hlavnej vetvy

pool:
  vmImage: 'macos-latest'  # Použitie macOS ako hostovanej agentúry

variables:
  buildConfiguration: 'Release'
  testResultsDirectory: '$(System.DefaultWorkingDirectory)/TestResults'
  reportDirectory: '$(System.DefaultWorkingDirectory)/testyCS/test_report'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '5.x'  # alebo iná verzia, ktorú potrebujete
    installationPath: $(Agent.ToolsDirectory)/dotnet

- script: |
    mkdir -p "$(reportDirectory)"
    mkdir -p "$(testResultsDirectory)"
    ls -la $(System.DefaultWorkingDirectory)
  displayName: 'Create directories and list workspace'

- task: DotNetCoreCLI@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    projects: '**/testyCS.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build project'
  inputs:
    command: 'build'
    projects: '**/testyCS.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Install Playwright CLI'
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'install --global Microsoft.Playwright.CLI'

- script: |
    dotnet-playwright install
  displayName: 'Download Playwright browsers'
  
- task: DotNetCoreCLI@2
  displayName: 'Run Tests'
  inputs:
    command: 'test'
    projects: '**/testyCS.csproj'
    arguments: '--configuration $(buildConfiguration) --logger trx --results-directory "$(testResultsDirectory)"'
    publishTestResults: false  # Manuálne publikujeme výsledky
  env:
    PLAYWRIGHT_BROWSERS_PATH: '0'

- script: |
    echo "Test results directory content:"
    ls -la "$(testResultsDirectory)" || echo "Test results directory not found"
    
    echo "Report directory content:"
    ls -la "$(reportDirectory)" || echo "Report directory not found"
  displayName: 'List test artifacts'
  condition: succeededOrFailed()

- task: PublishTestResults@2
  displayName: 'Publish test results'
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '$(testResultsDirectory)/**/*.trx'
    failTaskOnFailedTests: false
    testRunTitle: 'Playwright Tests'

- task: PublishBuildArtifacts@1
  displayName: 'Publish test reports'
  condition: succeededOrFailed()
  inputs:
    PathtoPublish: '$(reportDirectory)'
    ArtifactName: 'test-results'
    publishLocation: 'Container'

- task: PublishBuildArtifacts@1
  displayName: 'Publish test results as artifacts'
  condition: succeededOrFailed()
  inputs:
    PathtoPublish: '$(testResultsDirectory)'
    ArtifactName: 'TestResults'
    publishLocation: 'Container'
