# Odstránená sekcia trigger
# trigger:
# - main  # alebo master, záleží od názvu vašej hlavnej vetvy


schedules:
- cron: "0 9 * * 5"  # Spustí sa každý piatok o 9:00
  displayName: 'Weekly Friday Build'
  branches:
    include:
    - test1  # alebo iná vetva, ktorú chcete spúšťať

pool:
  vmImage: 'macos-latest'  # Použitie macOS ako hostovanej agentúry

#Variables
variables:
  buildConfiguration: 'Release'
  reportDirectory: '$(System.DefaultWorkingDirectory)/test_report'
  test1Title: 'UPR_IT_NewRequest'
  test2Title: 'UPR_Drilling_VE_NewRequest'
  test3Title: 'UPR_Drilling_VENAS_NewRequest'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '9.x'  # Verzia .NET SDK (zodpovedá vášmu projektu)
    installationPath: $(Agent.ToolsDirectory)/dotnet

#Create directories
- script: |
    mkdir -p "$(reportDirectory)"
    mkdir -p "$(reportDirectory)/$(test1Title)"
    mkdir -p "$(reportDirectory)/$(test2Title)"
    mkdir -p "$(reportDirectory)/$(test3Title)"
  displayName: 'Create test report directories'






- script: |
    dotnet build --configuration $(buildConfiguration)
  displayName: 'Build Project'

- script: |
    # Zjednodušený prístup - priama manipulácia so súbormi
    cd $(System.DefaultWorkingDirectory)
    
    # Nainštalovať Playwright bez MS Build
    PLAYWRIGHT_BROWSERS_PATH=$(System.DefaultWorkingDirectory)/.playwright
    echo "Setting PLAYWRIGHT_BROWSERS_PATH=$PLAYWRIGHT_BROWSERS_PATH"
    mkdir -p $PLAYWRIGHT_BROWSERS_PATH
    
    # Nainštaluj Playwright CLI 
    dotnet tool install --global Microsoft.Playwright.CLI

    # Nainštaluj prehliadače do definovaného adresára
    PLAYWRIGHT_BROWSERS_PATH=$PLAYWRIGHT_BROWSERS_PATH playwright install chromium
    
    # Vypíš obsah nainštalovaného adresára
    echo "Installed Playwright browsers at $PLAYWRIGHT_BROWSERS_PATH:"
    ls -la $PLAYWRIGHT_BROWSERS_PATH
    ls -la $PLAYWRIGHT_BROWSERS_PATH/*
  displayName: 'Install Playwright Browsers'



#test 1
- script: |
    echo "PLAYWRIGHT_BROWSERS_PATH=$(System.DefaultWorkingDirectory)/.playwright" >> $GITHUB_ENV
    find $(System.DefaultWorkingDirectory)/.playwright -type d
    dotnet test --configuration $(buildConfiguration) --logger trx --filter "FullyQualifiedName=PowerAppsLoginTests.Test_PowerAppsLogin"
  displayName: 'Run Test: $(test1Title)' #change name of test
  env:
    PLAYWRIGHT_BROWSERS_PATH: "$(System.DefaultWorkingDirectory)/.playwright"
    REPORT_DIRECTORY: '$(reportDirectory)/$(test1Title)'

#test2
- script: |
    echo "PLAYWRIGHT_BROWSERS_PATH=$(System.DefaultWorkingDirectory)/.playwright" >> $GITHUB_ENV
    find $(System.DefaultWorkingDirectory)/.playwright -type d
    dotnet test --configuration $(buildConfiguration) --logger trx --filter "FullyQualifiedName=PowerAppsLoginCreateStudent.Test_PowerAppsCreateStudent"
  displayName: 'Run Test: $(test2Title)' #change name of test
  env:
    PLAYWRIGHT_BROWSERS_PATH: "$(System.DefaultWorkingDirectory)/.playwright"
    REPORT_DIRECTORY: '$(reportDirectory)/$(test2Title)'

#test3
- script: |
    echo "PLAYWRIGHT_BROWSERS_PATH=$(System.DefaultWorkingDirectory)/.playwright" >> $GITHUB_ENV
    find $(System.DefaultWorkingDirectory)/.playwright -type d
    dotnet test --configuration $(buildConfiguration) --logger trx --filter "FullyQualifiedName=PowerAppsLoginCreateStudentInvalidPhone.Test_PowerAppsCreateStudentInvalidPhone"
  displayName: 'Run Test: $(test3Title)' #change name of test
  env:
    PLAYWRIGHT_BROWSERS_PATH: "$(System.DefaultWorkingDirectory)/.playwright"
    REPORT_DIRECTORY: '$(reportDirectory)/$(test3Title)'



- task: PublishTestResults@2
  displayName: 'Publish test $(test1Title) results'
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '$(reportDirectory)/$(test1Title)/*.trx'
    failTaskOnFailedTests: false
    testRunTitle: '$(test1Title)'

- task: PublishTestResults@2
  displayName: 'Publish test $(test2Title) results'
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '$(reportDirectory)/$(test1Title)/*.trx'
    failTaskOnFailedTests: false
    testRunTitle: '$(test2Title)'

- task: PublishTestResults@2
  displayName: 'Publish test $(test3Title) results'
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '$(reportDirectory)/$(test1Title)/*.trx'
    failTaskOnFailedTests: false
    testRunTitle: '$(test3Title)'

#Publish all tests
- task: PublishBuildArtifacts@1
  displayName: 'Publish $(test1Title) reports'
  condition: succeededOrFailed()
  inputs:
    PathtoPublish: '$(reportDirectory)/$(test1Title)'
    ArtifactName: 'test-results'
    publishLocation: 'Container'

- task: PublishBuildArtifacts@1
  displayName: 'Publish $(test2Title) reports'
  condition: succeededOrFailed()
  inputs:
    PathtoPublish: '$(reportDirectory)/$(test2Title)'
    ArtifactName: 'test-results'
    publishLocation: 'Container'

- task: PublishBuildArtifacts@1
  displayName: 'Publish $(test3Title) reports'
  condition: succeededOrFailed()
  inputs:
    PathtoPublish: '$(reportDirectory)/$(test3Title)'
    ArtifactName: 'test-results'
    publishLocation: 'Container'
